name: Docker

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: hello-ops

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  # test:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Run tests
  #       run: |
  #         if [ -f docker-compose.test.yml ]; then
  #           docker-compose --file docker-compose.test.yml build
  #           docker-compose --file docker-compose.test.yml run api.lint
  #         else
  #           docker build . --file Dockerfile
  #         fi

  # Setup infrastructure
  infrastructure:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Create CodeDeploy deployment
        uses: chrislennon/action-aws-cli@1.1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2
      - run: |
          cloud_formation/create_or_update_stack.sh us-east-2 StorverTestStack --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM --template-body file://cloud_formation/storver_template.json --parameter ParameterKey=KeyName,ParameterValue=av_pro_laptop


  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: infrastructure

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ops-ground
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag $IMAGE_NAME $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Init docker pulling script
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ops-ground
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_NAME=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
          echo """
          #!/bin/bash
          $(aws ecr get-login --no-include-email --region us-east-2)
          sudo docker pull ${IMAGE_NAME}
          sudo docker tag ${IMAGE_NAME} api:latest
          sudo docker rmi ${IMAGE_NAME}
          """ > aws_code_deploy_scripts/after_install.sh
          cat aws_code_deploy_scripts/after_install.sh

      - name: Create CodeDeploy deployment
        uses: chrislennon/action-aws-cli@1.1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2
      - run: |
          aws deploy push \
            --application-name OpsGround_App \
            --s3-location s3://opsgroundcodedeploydemo/OpsGroundApp.zip
          aws deploy create-deployment \
            --application-name OpsGround_App \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --deployment-group-name OpsGround_DepGroup \
            --s3-location bucket=opsgroundcodedeploydemo,bundleType=zip,key=OpsGroundApp.zip
